package ru.averinaoy.api.lesson1;


    /*В этот телефонный справочник с помощью метода add() можно добавлять записи, а с помощью метода get() искать номер телефона по фамилии.
Следует учесть, что под одной фамилией может быть несколько телефонов (в случае однофамильцев),
тогда при запросе такой фамилии должны выводиться все телефоны. */


import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class test1 {

    private static HashMap<String, String> pb = new HashMap<String, String>();

    private static void add(String phone, String name) throws IOException {
        pb.put(phone, name);
        save();
    }
    }

    private static void save() throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(new File("phonebook.txt")));
        for (Map.Entry<String, String> k : pb.entrySet()) {
            writer.write(k.getKey() + " " + k.getValue() + System.lineSeparator());
        }
        writer.close();
    }

    public static void load() throws IOException {
        File file = new File("phonebook.txt");
        if (file.exists()) {
            BufferedReader reader = new BufferedReader(new FileReader(new File("phonebook.txt")));
            String act;
            while ((act = reader.readLine()) != null) {
                String[] dat = act.split(" ");
                pb.put(dat[0], dat[1]);
            }
            reader.close();
        }
    }

    public static void print() {
        System.out.println("Phonebook: ");
        for (Map.Entry<String, String> k : pb.entrySet()) {
            System.out.println(k.getValue() + ": " + k.getKey());
        }
    }

    public static String find(String number) {
        String result = pb.get(number);
        if (result == null)
            return "Subscriber not found";
        return result;
    }

    public static String[] findNumberPhone(String surname) {
        List<String> result = new ArrayList<String>();
        for (Map.Entry<String, String> entry : pb.entrySet()) {
            if (surname.equalsIgnoreCase(entry.getValue())) {
                result.add(entry.getKey());
            }
        }
        if (result.size() == 0)
            result.add("Subscriber not found");
        return result.toArray(new String[0]);
    }

    public static void main(String[] args) throws IOException {
        String act;
        System.out.print("Welcome to the phonebook.\nAction choice: 1 - add data, 2 - find numbers by last name , 3 - phonebook printing, 4 - exit");

        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        act = bf.readLine();
        while (!act.equals("4")) {
            if (act.equals("1")) {
                System.out.println("Enter lastname:");
                String name = bf.readLine();
                System.out.println("Enter phone:");
                String phone = bf.readLine();
                add(phone, name);
            } else if (act.equals("2")) {
                System.out.println("lastname:");
                String surname = bf.readLine();
                String[] numbers = findNumberPhone(surname);
                for (String number : numbers) {
                    System.out.println(number);
                }
            }
                else if (act.equals("3")) {
                load();
                print();
            
            }
            System.out.println("Welcome to the phonebook.\nAction choice: 1 - add data, 2 - find numbers by last name , 3 - phonebook printing, 4 - exit");
            act = bf.readLine();
        }
    }
}
    

